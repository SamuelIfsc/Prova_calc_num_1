import numpy as np

# Definindo a matriz dos coeficientes A e o vetor dos termos independentes B
A = np.array([
    [1, 1, 1, 2],
    [2, 1, 0, 2],
    [0, 1, 1, 1],
    [2, 0, 1, 2]
], dtype=float)

B = np.array([25, 25, 15, 25], dtype=float)

# Função para aplicar o método de Eliminação de Gauss
def gauss_elimination(A, B):
    n = len(B)
    # Fase de Eliminação
    for i in range(n):
        # Pivoteamento parcial
        max_row = i + np.argmax(abs(A[i:, i]))
        if A[max_row, i] == 0:
            raise ValueError("O sistema não tem solução única.")
        # Trocar a linha i com a linha do elemento máximo
        A[[i, max_row]] = A[[max_row, i]]
        B[[i, max_row]] = B[[max_row, i]]
        
        # Tornar o elemento pivô igual a 1 e zerar os elementos abaixo
        for j in range(i + 1, n):
            factor = A[j, i] / A[i, i]
            A[j, i:] -= factor * A[i, i:]
            B[j] -= factor * B[i]
    
    # Fase de Retrosubstituição
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (B[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]
    return x

# Resolvendo o sistema com Eliminação de Gauss
try:
    x_gauss = gauss_elimination(A.copy(), B.copy())
    x_gauss_rounded = np.round(x_gauss, 4)  # Arredondando para 4 casas decimais
    print("Solução do sistema:", x_gauss_rounded)
except ValueError as e:
    print("Erro:", e)
